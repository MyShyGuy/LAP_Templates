@page "/register"

@using DB_Models.DTO;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager;
@inject BLDAL.UnitOfWork uow;

<h3>Register</h3>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@LoginVM" OnValidSubmit="Authenticate" FormName="RegForm">
            <DataAnnotationsValidator />

            <div class="mb-3 text-center flex-column">
                <img src="/images/avatar.png" id="SignPic" class="img-fluid" />
                <h3>Register</h3>
            </div>

            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="LoginVM.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => LoginVM.UserName" />
            </div>

            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="LoginVM.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => LoginVM.Password" />
            </div>

            <div class="mb-3 text-center">
                <span class="text-danger">@ErrorMessage</span>
            </div>

            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary">Register</button>
            </div>
        </EditForm>
       <div class="mt-3 text-center">
            <p>Already have an account? <a href="/login">Login here</a></p>
       </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginDTO LoginVM { get; set; } = new();

    private string? ErrorMessage { get; set; }

    private async Task Authenticate()
    {
        if (!isValid(LoginVM.Password))
        {
            ErrorMessage = "Passwort muss:\nmin.8 Zeichen lang sein\nmin. 1 Großbuchstabe\nmin.1 Kleinbuchstabe\nmin.1 Zahl und 1 Sonderzeichen enthalten.";
            return;
        }

        var userAccount = uow.Userrepo.RegisterUser(LoginVM);
        if (userAccount == null)
        {
            ErrorMessage = "Invalid username or password.";
            return;
        }
        else
        {
            var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, userAccount.UserName),
            new Claim(ClaimTypes.Role, userAccount.Roles.FirstOrDefault().RoleName)
        };
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            await HttpContext.SignInAsync(principal);
            NavigationManager.NavigateTo("/");
        }
    }

    private bool isValid(string pw)
    {
        var isv = Regex.IsMatch(pw,
        @"^(?=.*[a-z])      # mind. 1 Kleinbuchstabe
              (?=.*[A-Z])      # mind. 1 Großbuchstabe
              (?=.*\d)         # mind. 1 Zahl
              (?=.*[^a-zA-Z\d])# mind. 1 Sonderzeichen
              .{8,}$           # mindestens 8 Zeichen
            ", RegexOptions.IgnorePatternWhitespace);

        if (isv)
            return true;
        else
            return false;
    }
}
